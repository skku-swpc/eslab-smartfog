##
# soft-sensor-manager project build script
##

Import('env')

# Add third party libraries
lib_env = env.Clone()
SConscript(env.get('SRC_DIR') + '/service/third_party_libs.scons', 'lib_env')
virtual_sensor_env = lib_env.Clone()

target_os = env.get('TARGET_OS')
# As in the source code, it includes arduino Time library (C++)
# It requires compile the .c with g++
if target_os == 'arduino':
	soft_sensor_manager_env.Replace(CC = env.get('CXX'))
	soft_sensor_manager_env.Replace(CFLAGS = env.get('CXXFLAGS'))

######################################################################
# Build flags
######################################################################
if target_os not in ['windows', 'winrt']:
	soft_sensor_manager_env.AppendUnique(CXXFLAGS = ['-std=c++0x', '-Wall', '-DLINUX'])
	if target_os != 'android':
		soft_sensor_manager_env.AppendUnique(CXXFLAGS = ['-pthread'])

if target_os == 'android':
	soft_sensor_manager_env.AppendUnique(CXXFLAGS = ['-frtti', '-fexceptions'])
	soft_sensor_manager_env.AppendUnique(LIBS = ['gnustl_static', 'compatibility'])

	if not env.get('RELEASE'):
		soft_sensor_manager_env.AppendUnique(LIBS = ['log'])

#######################################################################
## build SSM SDK
#######################################################################
sdk_env = virtual_sensor_env.Clone()
sdk_env.AppendUnique(CPPPATH = ['smartfog-api/inc'])
sdk_env.AppendUnique(CPPPATH = ['smartfog-api/src'])
smartfog_sdk_cpp_src = [
		Glob('smartfog-api/src/*.cpp')
		]

env.AppendTarget('libSmartFogSDK')
libsmartfogsdk = sdk_env.StaticLibrary(
		target = 'libSmartFogSDK',
		source = [smartfog_sdk_cpp_src]
		)		
sdk_env.InstallTarget(libsmartfogsdk, 'libSmartFogSDK')

######################################################################
# build DiscomfortIndexSensor plugin
######################################################################
DiscomfortIndexSensor_env = soft_sensor_manager_env.Clone()

DiscomfortIndexSensor_env.AppendUnique(CCFLAGS = ['-fPIC'])
DISCOMFORTINDEXSENSOR_DIR = 'SoftSensorPlugin/DiscomfortIndexSensor/'
DiscomfortIndexSensor_env.AppendUnique(CPPPATH = [
		DISCOMFORTINDEXSENSOR_DIR + 'include',
		'SSMCore/src/SSMInterface/'
		])

DiscomfortIndexSensor_src = [ Glob(DISCOMFORTINDEXSENSOR_DIR + 'src/*.cpp')]

DiscomfortIndexSensor = DiscomfortIndexSensor_env.SharedLibrary('DiscomfortIndexSensor', DiscomfortIndexSensor_src)
DiscomfortIndexSensor_env.InstallTarget(DiscomfortIndexSensor, 'libDiscomfortIndexSensor')

######################################################################
# build Gateway Manager
######################################################################
gw_manager = virtual_sensor_env.Clone()

ssmcore_env.AppendUnique(CPPPATH = [
		'gateway-manager/include/',
		'gateway-manager/src/'
		])

import os.path

SSMINTERFACE_PATH = 'SSMCore/src/SSMInterface/'

if target_os != 'android':
else :
	ssminterface_src = Glob(SSMINTERFACE_PATH + '*.cpp')

gw_manager_src = [
		Glob('gateway-manager/src/*.cpp')
		]

libssmcore = ssmcore_env.StaticLibrary(
		target = 'SSMCore',
		source = [ssm_core_cpp_src, ssm_core_c_src]
		)

ssmcore_env.InstallTarget(libssmcore, 'libSSMCORE')

#######################################################################
## build SampleApp
#######################################################################
SConscript('SampleApp/SConscript')


######################################################################
# Copy description xml and deliverables
######################################################################
if target_os == 'linux':
	Command("SSMTesterApp","SampleApp/linux/SSMTesterApp/SSMTesterApp", Copy("$TARGET", "$SOURCE"))
	Command("SoftSensorDescription.xml", "SoftSensorPlugin/SoftSensorDescription.xml", Copy("$TARGET", "$SOURCE"))
	Command("THSensorApp","SampleApp/linux/THSensorApp/THSensorApp", Copy("$TARGET", "$SOURCE"))
	Command("THSensorApp1","SampleApp/linux/THSensorApp1/THSensorApp1", Copy("$TARGET", "$SOURCE"))
